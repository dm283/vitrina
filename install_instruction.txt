************************ COMMON ENVIRONMENT (for both apps Client & Operator servers) ********************
WinRar (https://www.rarlab.com/download.htm)
Git (https://git-scm.com/download/win)
Python (https://www.python.org/)
NodeJS (https://nodejs.org/en/download)
NPM (npm install -g npm)
VisualStudioCode ()


*************************************************** CLIENT-APP ***************************************************
1. CREATE ENVIRONMENT
    1.1. as in COMMON ENVIRONMENT
    1.2. install database Postgre or MS-SQL (if not exist)
    1.3. for access from remote server (Operator-app) add to c:\Program Files\PostgreSQL\***\data\pg_hba.conf    
	# IPv4 local connections:   host    all             all             host-ip/32            md5

2. INSTALL VITRINA
    2.1. create folder svh-service -> cd svh-service
    2.2. git clone https://github.com/dm283/vitrina.git
    2.3. cd vitrina
    2.4. python -m venv venv -> venv\scripts\activate
    2.5. pip install -r requirements.txt
    2.6. copy or create node_modules  (see instructions below)

3. CREATE DATABASE
    3.1. create database 'svh_service_db'

4. SET CONFIGURATION
    4.1. copy config_template.ini to config.ini  ->  set settings [app] & [db]   (app_type = client)


************************************************** OPERATOR-APP ************************************************
1. CREATE ENVIRONMENT
    1.1. as in COMMON ENVIRONMENT

2. INSTALL VITRINA (as for Client-app)

3. SET CONFIGURATION
-  copy config_template.ini to config.ini  ->  set settings [app] & [db]   (app_type = operator)

4. DATABASE
-  test remote db connection in powershell:  test-netconnection HOST -port 5432
-  if test has a problem - check system firewall on Client-app server
-  run script db_manage_*.py  (part with connection only)
-  if script has a problem - check point 1.3. for Client-app installation

-  python manage.py migrate
-  python manage.py makemigrations -> python manage.py makemigrations [app-name] -> migrate
-  python manage.py createsuperuser    (admin/admin135)
-  python manage.py runserver

5. MIGRATE DATA FROM AltaSoft DATABASE
    5.1. python db_migration.py (before running - uncomment inside code appropriated blocks for Consignments and then for Carpass)

6. INSTALL MSENDER
    6.1. git clone https://github.com/dm283/mSender.git
    6.2. ask admin for settings: smtp and imap server
    6.3. follow the install_instruction.txt  (in mSenderAdministration:  e-mail_files_folder='media\documents', db_table='svh_service_uemail')

7. CREATE SOME (MAYBE ONE) CONTACTS IN VITRINA
    7.1. operator svh (type = 'O', contact = -1)  - create in admin (contact -> user -> profile)
    7.2. client (type = 'V') - create Contact in Vitrina service -> admin create user and profile
    7.3. broker (type = 'B') - create Contact in Vitrina service -> admin create user and profile

8. TEST VITRINA WORK
    8.1. open consignment card, change some fields, save, post - check if email was send
    8.2. create some documents in consignment card, then POST  -  check email

9. TEST Client-app


********************************************  CREATE NPM MODULES  ********************************************
1. in '/static/' folder create '/node_modules/' folder  -> cd node_modules
2. npm install bootstrap bootstrap-table bootstrap-icons jquery-resizable-columns
3. git clone https://github.com/akottr/dragtable/
4. copy 'jquery-ui.js' from '/static/' to '/node_modules/'
5. git clone https://github.com/hhurz/tableExport.jquery.plugin
6. change in "node_modules\bootstrap-table\dist\extensions\export\bootstrap-table-export.min.js":
    - exportDataType: "all'
    - exportTypes: ["json","xml","csv","txt","sql","excel","xlsx","pdf"]
7. add into "bootstrap-table-min.css" :
    .bootstrap-table .fixed-table-container .table th{font-family: Arial, Helvetica, sans-serif; background-color: SteelBlue; color: GhostWhite; text-align: center; font-size: 13px;}
    .bootstrap-table .fixed-table-container .table td{font-family: Arial, Helvetica, sans-serif; color: DarkSlateGray; font-size: 14px; font-weight: normal;}